{"version":3,"sources":["features/Calculator/Button.js","features/Calculator/Calculator.js","serviceWorker.js","index.js","app/Reducer.js"],"names":["Button","children","id","dispatch","useDispatch","onClick","type","value","ACButton","EvalButton","Calculator","expression","useSelector","state","console","log","prev","join","className","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","configureStore","reducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","defaultState","num","operator","evalExpression","action","res","eval","Math","abs","toString","e","getNewInput","currentKey","newExp","test","concat","isNaN","slice","newNum","a","b","indexOf","Object","assign"],"mappings":"mOAGO,SAASA,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,SAAUC,EAAK,EAALA,GAC1BC,EAAWC,cACjB,OACE,wBAAQF,GAAIA,EAAIG,QAAS,WACvBF,EAAS,CACPG,KAAM,eACNC,MAAON,KAHX,SAOGA,IAIA,SAASO,EAAT,GAAmC,IAAhBP,EAAe,EAAfA,SAAUC,EAAK,EAALA,GAC5BC,EAAWC,cACjB,OACE,wBAAQF,GAAIA,EAAIG,QAAS,WACvBF,EAAS,CACPG,KAAM,iBAFV,SAKGL,IAIA,SAASQ,EAAT,GAAqC,IAAhBR,EAAe,EAAfA,SAAUC,EAAK,EAALA,GAC9BC,EAAWC,cACjB,OACE,wBAAQF,GAAIA,EAAIG,QAAS,WACvBF,EAAS,CACPG,KAAM,qBAFV,SAKGL,ICsDQS,MApFf,WACE,IAAQC,EAAeC,aAAY,SAAAC,GAAK,OAAEA,KAAlCF,WACRG,QAAQC,IAAIJ,GACZ,IAAIK,EAAOL,EAAWM,KAAK,KAC3B,OACE,sBAAKf,GAAG,aAAR,UACE,qBAAKgB,UAAU,MAAf,SACE,qBAAKA,UAAU,OAAf,SACE,yBAAQA,UAAU,SAAlB,UACE,qBAAKhB,GAAG,UAAR,SAA4B,MAATc,EAAc,IAAKA,IACtC,qBAAKd,GAAG,UAAR,SAAmBS,EAAWA,EAAWQ,OAAO,YAItD,sBAAKD,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACV,EAAD,CAAUN,GAAG,QAAb,kBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,SAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,WAAX,oBAGJ,sBAAKgB,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,QAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,QAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,OAAX,oBAGJ,sBAAKgB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,OAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,OAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,MAAX,oBAGJ,sBAAKgB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,MAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,MAAX,iBAEF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,QAAX,oBAGJ,sBAAKgB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,OAAX,iBAGF,qBAAKgB,UAAU,aAAf,SACE,cAAClB,EAAD,CAAQE,GAAG,UAAX,uBAIN,sBAAKgB,UAAU,mBAAf,UACE,cAAClB,EAAD,CAAQE,GAAG,WAAX,eAEA,cAACF,EAAD,CAAQE,GAAG,MAAX,eAEA,cAACO,EAAD,CAAYP,GAAG,SAAf,yB,OCtEUkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOC,YAAe,CAACC,cAAjC,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,qQErIbC,aAAe,CACnB5B,WAAY,CAAC,MAGX6B,IAAM,QACNC,SAAW,SAETC,eAAiB,SAAjBA,eAAkB7B,MAAO8B,QAC7B,IAAOhC,WAAcE,MAAdF,WACP,IACE,IAAIiC,IAAMC,KAAKlC,WAAWM,KAAK,MAC/B,OAAI2B,IAAM,EACD,CAAC,IAAKE,KAAKC,IAAIH,KAAKI,YACV,IAARJ,IACFL,aAEF,CAACK,IAAII,YACZ,MAAOC,GACP,OAAOV,eAKLW,YAAc,SAACrC,EAAO8B,GAC1B,IAAOhC,EAAcE,EAAdF,WACHwC,EAAaR,EAAOpC,MAEpBS,EAAOL,EAAWA,EAAWQ,OAAO,GACpCiC,EAAS,GAEb,GAAKX,SAASY,KAAKrC,GAsBjBoC,EAASzC,EAAW2C,OAAOH,QArB3B,GAAII,MAAMvC,EAAOmC,GASbC,EADiB,MAAfD,EACOxC,EAEG,MAATK,EACQL,EAAW6C,MAAM,GAAG,GAAGF,OAAOH,GAE9BxC,EAAW2C,OAAOH,OAdH,CAC5B,IAAIM,EAASzC,EAAOmC,EAChBX,IAAIa,KAAKI,IAAyB,MAAdA,EAAO,KAC7BA,EAASA,EAAOD,MAAM,IAExBJ,EAASzC,EAAW6C,MAAM,GAAG,GAAGF,OAAOG,GAmB3C,KAAML,EAAOjC,QAAU,GAAG,CACxB,IAAIuC,EAAIN,EAAOA,EAAOjC,OAAO,GACzBwC,EAAIP,EAAOA,EAAOjC,OAAO,GAC7B,KAAKsB,SAASY,KAAKK,KAAoC,IAA9B,CAAC,IAAI,IAAI,KAAKE,QAAQD,IACtC,MAAND,GAAmB,MAANC,GAGd,MAFAP,EAASA,EAAOI,MAAM,GAAG,GAAGF,OAAOK,GAMvC,MAAO,CAAChD,WAAYyC,IAKhBtB,QAAU,WAAiC,IAAhCjB,EAA+B,uDAAzB0B,aAAcI,EAAW,uCAC9C,OAAQA,EAAOrC,MACb,IAAK,eACH,OAAOuD,OAAOC,OAAO,GAAIjD,EAAOqC,YAAYrC,EAAO8B,IACrD,IAAK,cACH,OAAO,+KAAIJ,cACb,IAAK,kBACH,MAAO,CAAC5B,WAAY+B,eAAe7B,EAAO8B,IAC5C,QACE,OAAO9B,IAIEiB,gC","file":"static/js/main.beb06cea.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux'\nimport React from 'react'\n\nexport function Button({children, id}) {\n  const dispatch = useDispatch()\n  return (\n    <button id={id} onClick={() => {\n      dispatch({\n        type: 'UPDATE_INPUT',\n        value: children\n      })\n\n    }\n    }>{children}</button>\n  )\n}\n\nexport function ACButton({children, id}) {\n  const dispatch = useDispatch()\n  return (\n    <button id={id} onClick={() => {\n      dispatch({\n        type: 'CLEAR_INPUT'\n      })\n    }\n    }>{children}</button>\n  )\n}\n\nexport function EvalButton({children, id}) {\n  const dispatch = useDispatch()\n  return (\n    <button id={id} onClick={() => {\n      dispatch({\n        type: 'EVAL_EXPRESSION'\n      })\n    }\n    }>{children}</button>\n  )\n}","import React from 'react'\n// import { Tooltip, Toast, Popover } from 'bootstrap';\n\nimport '../../App.scss';\nimport {useSelector } from 'react-redux'\nimport {ACButton, Button, EvalButton} from './Button'\n\nfunction Calculator() {\n  const { expression } = useSelector(state=>state)\n  console.log(expression)\n  let prev = expression.join(\" \")\n  return (\n    <div id=\"calculator\">\n      <div className=\"row\">\n        <div className=\"cell\">\n          <button className=\"screen\">\n            <div id=\"top-row\">{prev === '0'? \" \": prev}</div>\n            <div id=\"display\">{expression[expression.length-1]}</div>\n          </button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6 cell\">\n          <ACButton id=\"clear\">AC</ACButton>\n        </div>\n        <div className=\"col-3 cell\">\n          <Button id=\"divide\">/</Button>\n        </div>\n        <div className=\"col-3 cell\">\n          <Button id=\"multiply\">*</Button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-9\">\n          <div className=\"row\">\n            <div className=\"col-4 cell\">\n              <Button id=\"seven\">7</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"eight\">8</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"nine\">9</Button>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4 cell\">\n              <Button id=\"four\">4</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"five\">5</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"six\">6</Button>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-4 cell\">\n              <Button id=\"one\">1</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"two\">2</Button>\n            </div>\n            <div className=\"col-4 cell\">\n              <Button id=\"three\">3</Button>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-8 cell\">\n              <Button id=\"zero\">0</Button>\n            </div>\n\n            <div className=\"col-4 cell\">\n              <Button id=\"decimal\">.</Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-3 op-br cell\">\n          <Button id=\"subtract\">-</Button>\n\n          <Button id=\"add\">+</Button>\n\n          <EvalButton id=\"equals\">=</EvalButton>\n\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Calculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Calculator is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reducer from './app/Reducer'\nimport Calculator from './features/Calculator/Calculator';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore({reducer})}>\n      <Calculator />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const defaultState = {\n  expression: [\"0\"]\n}\n\nlet num = /-?\\d+/\nlet operator = /[+*/-]/\n\nconst evalExpression = (state, action) => {\n  const {expression} = state\n  try {\n    let res = eval(expression.join(\" \"))\n    if (res < 0){\n      return ['-', Math.abs(res).toString()]\n    } else if (res === 0){\n      return defaultState\n    }\n    return [res.toString()]\n  } catch (e) {\n    return defaultState\n  }\n}\n\n\nconst getNewInput = (state, action) => {\n  const {expression} = state\n  let currentKey = action.value\n\n  let prev = expression[expression.length-1] // previous expres\n  let newExp = []\n\n  if (!operator.test(prev)) { // prev was number\n    if(!isNaN(prev + currentKey)) { //new number\n      let newNum = prev + currentKey\n      if (num.test(newNum) && newNum[0] === '0') { // remove leading zero\n        newNum = newNum.slice(1)\n      }\n      newExp = expression.slice(0,-1).concat(newNum)\n\n    } else { // not new number\n      if (currentKey === '.'){ //invalid input\n        newExp = expression\n      } else { //we insert an operator, need to expand the arr\n        if(prev === '0'){ //if at the beginning, we remove the 0\n          newExp = expression.slice(0,-1).concat(currentKey)\n        } else{\n          newExp = expression.concat(currentKey)\n        }\n\n      }\n\n    }\n  } else { //prev was operator\n    newExp = expression.concat(currentKey) // expand first\n  }\n\n  while(newExp.length >= 2) { //two operators in a row are not allowed except for the case when the last and last one is -\n    let a = newExp[newExp.length-2]\n    let b = newExp[newExp.length-1]\n    if ((operator.test(a) && ['+','/','*'].indexOf(b) !== -1) ||\n      (a === '-' && b === '-')){\n      newExp = newExp.slice(0,-2).concat(b) //remove the last operator before insert the new one\n    } else {\n      break\n    }\n  }\n\n  return {expression: newExp}\n\n}\n\n\nconst reducer = (state=defaultState, action) => {\n  switch (action.type) {\n    case 'UPDATE_INPUT':\n      return Object.assign({}, state, getNewInput(state, action))\n    case \"CLEAR_INPUT\":\n      return {...defaultState}\n    case \"EVAL_EXPRESSION\":\n      return {expression: evalExpression(state, action)}\n    default:\n      return state\n  }\n}\n\nexport default reducer\n\n"],"sourceRoot":""}